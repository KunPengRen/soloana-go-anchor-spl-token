// Code generated by https://github.com/dcaf-mocha/anchor-go. DO NOT EDIT.

package token_contract

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MintToken is the `mintToken` instruction.
type MintToken struct {

	// [0] = [WRITE] mint
	//
	// [1] = [] tokenProgram
	//
	// [2] = [WRITE] tokenAccount
	//
	// [3] = [WRITE] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

type MintTokenAccounts struct {
	Mint         ag_solanago.PublicKey
	TokenProgram ag_solanago.PublicKey
	TokenAccount ag_solanago.PublicKey
	Authority    ag_solanago.PublicKey
}

// NewMintTokenInstructionBuilder creates a new `MintToken` instruction builder.
func NewMintTokenInstructionBuilder() *MintToken {
	nd := &MintToken{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

func (inst *MintToken) GetMintTokenAccounts() *MintTokenAccounts {
	res := &MintTokenAccounts{}
	if inst.AccountMetaSlice[0] != nil {
		res.Mint = inst.AccountMetaSlice[0].PublicKey
	}
	if inst.AccountMetaSlice[1] != nil {
		res.TokenProgram = inst.AccountMetaSlice[1].PublicKey
	}
	if inst.AccountMetaSlice[2] != nil {
		res.TokenAccount = inst.AccountMetaSlice[2].PublicKey
	}
	if inst.AccountMetaSlice[3] != nil {
		res.Authority = inst.AccountMetaSlice[3].PublicKey
	}
	return res
}

// SetMintAccount sets the "mint" account.
func (inst *MintToken) SetMintAccount(mint ag_solanago.PublicKey) *MintToken {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *MintToken) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MintToken) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MintToken {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MintToken) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenAccountAccount sets the "tokenAccount" account.
func (inst *MintToken) SetTokenAccountAccount(tokenAccount ag_solanago.PublicKey) *MintToken {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenAccount).WRITE()
	return inst
}

// GetTokenAccountAccount gets the "tokenAccount" account.
func (inst *MintToken) GetTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *MintToken) SetAuthorityAccount(authority ag_solanago.PublicKey) *MintToken {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(authority).WRITE()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *MintToken) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst MintToken) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MintToken,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MintToken) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MintToken) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *MintToken) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MintToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        mint", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("tokenProgram", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       token", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   authority", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj MintToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *MintToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewMintTokenInstruction declares a new MintToken instruction with the provided parameters and accounts.
func NewMintTokenInstruction(
	// Accounts:
	mint ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	tokenAccount ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *MintToken {
	return NewMintTokenInstructionBuilder().
		SetMintAccount(mint).
		SetTokenProgramAccount(tokenProgram).
		SetTokenAccountAccount(tokenAccount).
		SetAuthorityAccount(authority)
}
