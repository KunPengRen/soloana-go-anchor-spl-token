// Code generated by https://github.com/dcaf-mocha/anchor-go. DO NOT EDIT.

package token_contract

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TransferToken is the `transferToken` instruction.
type TransferToken struct {

	// [0] = [] tokenProgram
	//
	// [1] = [WRITE] from
	//
	// [2] = [WRITE] to
	//
	// [3] = [SIGNER] fromAuthority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

type TransferTokenAccounts struct {
	TokenProgram  ag_solanago.PublicKey
	From          ag_solanago.PublicKey
	To            ag_solanago.PublicKey
	FromAuthority ag_solanago.PublicKey
}

// NewTransferTokenInstructionBuilder creates a new `TransferToken` instruction builder.
func NewTransferTokenInstructionBuilder() *TransferToken {
	nd := &TransferToken{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

func (inst *TransferToken) GetTransferTokenAccounts() *TransferTokenAccounts {
	res := &TransferTokenAccounts{}
	if inst.AccountMetaSlice[0] != nil {
		res.TokenProgram = inst.AccountMetaSlice[0].PublicKey
	}
	if inst.AccountMetaSlice[1] != nil {
		res.From = inst.AccountMetaSlice[1].PublicKey
	}
	if inst.AccountMetaSlice[2] != nil {
		res.To = inst.AccountMetaSlice[2].PublicKey
	}
	if inst.AccountMetaSlice[3] != nil {
		res.FromAuthority = inst.AccountMetaSlice[3].PublicKey
	}
	return res
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *TransferToken) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *TransferToken {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *TransferToken) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFromAccount sets the "from" account.
func (inst *TransferToken) SetFromAccount(from ag_solanago.PublicKey) *TransferToken {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(from).WRITE()
	return inst
}

// GetFromAccount gets the "from" account.
func (inst *TransferToken) GetFromAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetToAccount sets the "to" account.
func (inst *TransferToken) SetToAccount(to ag_solanago.PublicKey) *TransferToken {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(to).WRITE()
	return inst
}

// GetToAccount gets the "to" account.
func (inst *TransferToken) GetToAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetFromAuthorityAccount sets the "fromAuthority" account.
func (inst *TransferToken) SetFromAuthorityAccount(fromAuthority ag_solanago.PublicKey) *TransferToken {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(fromAuthority).SIGNER()
	return inst
}

// GetFromAuthorityAccount gets the "fromAuthority" account.
func (inst *TransferToken) GetFromAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst TransferToken) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_TransferToken,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TransferToken) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TransferToken) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.From is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.To is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.FromAuthority is not set")
		}
	}
	return nil
}

func (inst *TransferToken) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TransferToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" tokenProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         from", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           to", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("fromAuthority", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj TransferToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *TransferToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewTransferTokenInstruction declares a new TransferToken instruction with the provided parameters and accounts.
func NewTransferTokenInstruction(
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	from ag_solanago.PublicKey,
	to ag_solanago.PublicKey,
	fromAuthority ag_solanago.PublicKey) *TransferToken {
	return NewTransferTokenInstructionBuilder().
		SetTokenProgramAccount(tokenProgram).
		SetFromAccount(from).
		SetToAccount(to).
		SetFromAuthorityAccount(fromAuthority)
}
